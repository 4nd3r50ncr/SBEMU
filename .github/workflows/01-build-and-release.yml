# With thanks to https://gist.github.com/weibeld/f136048d0a82aacc063f42e684e3c494
name: build-and-release
on: push
permissions:
  contents: write
jobs:
  release-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: src
      - name: Install DJGPP
        run: |
          pushd /opt
          wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.3/djgpp-linux64-gcc1210.tar.bz2
          tar -xf djgpp-linux64-gcc1210.tar.bz2
          rm djgpp-linux64-gcc1210.tar.bz2
          popd
      - name: Build project
        run: |
          cd $GITHUB_WORKSPACE/src
          ls -lh main.c
          . /opt/djgpp/setenv
          make
          ls -lh output/sbemu.exe
      - name: Build FreeDOS SBEMU USB image
        run: |
          cd /tmp
          wget https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/1.3/official/FD13-LiteUSB.zip
          wget https://www.freedos.org/download/verify.txt
          grep -q "64a934585087ccd91a18c55e20ee01f5f6762be712eeaa5f456be543778f9f7e  FD13-LiteUSB.zip" verify.txt
          echo "64a934585087ccd91a18c55e20ee01f5f6762be712eeaa5f456be543778f9f7e  FD13-LiteUSB.zip" | shasum -a 256 --check
          unzip FD13-LiteUSB.zip
          rm FD13-LiteUSB.zip
          wget https://github.com/Baron-von-Riedesel/Jemm/releases/download/v5.84pre2/JemmB_v584.zip
          echo "719dfea1fdc609c5256fee4b8ad6db6880ff7a29f0ddc5dcaaa609a87771d218  JemmB_v584.zip" | shasum -a 256 --check
          wget https://github.com/crazii/HX/releases/download/v0.1-beta3/HDPMI32i.zip
          echo "4b7fc576d6c5dfd3fe7290fd1d0c0229118d01a55c8325d487452c2d6e0c3bbd  HDPMI32i.zip" | shasum -a 256 --check
          mkdir /tmp/mnt
          sudo mount FD13LITE.img /tmp/mnt -t vfat -o loop,offset=$((63*512)),rw,uid=$(id -u),gid=$(id -g)
          cp $GITHUB_WORKSPACE/src/output/sbemu.exe /tmp/mnt/
          cd /tmp/mnt
          mkdir jemm
          cd jemm
          unzip /tmp/JemmB_v584.zip
          ls -lh JEMMEX.EXE
          ls -lh JLOAD.EXE
          ls -lh QPIEMU.DLL
          cd ..
          mkdir hdpmi
          cd hdpmi
          unzip /tmp/HDPMI32i.zip
          ls -lh HDPMI32i.EXE
          cd ..
          sed -i 's/DEVICE=\\FREEDOS\\BIN\\HIMEMX.EXE/DEVICE=\\JEMM\\JEMMEX.EXE\nDEVICE=\\JEMM\\JLOAD.EXE \\JEMM\\QPIEMU.DLL/g' fdconfig.sys
          mv setup.bat setup.bak
          cd /tmp
          rm JemmB_v584.zip
          sudo umount /tmp/mnt
          mv FD13LITE.img SBEMU-FD13-USB.img
          xz -k -9e SBEMU-FD13-USB.img
          mv SBEMU-FD13-USB.img.xz $GITHUB_WORKSPACE/
      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=UserBuild_$(date +"%Y.%m.%d_%H-%M")" >> $GITHUB_OUTPUT
      - name: Release FreeDOS SBEMU USB image
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            ${{ github.workspace }}/SBEMU-FD13-USB.img.xz
          body: |
            The USB image can be written to a USB drive or SD card using a tool like [balenaEtcher](https://etcher.balena.io/).

            The advantage of using Etcher is that you don't have to decompress the `.xz` archive first.
            It will decompress such files automatically, before writing the image to the target drive.

            Alternatively, you can test the image in a VM with QEMU as follows:

            ```shell
            unxz SBEMU-FD13-USB.img.xz
            qemu-system-i386 -drive file=SBEMU-FD13-USB.img,format=raw -device AC97
            ```

            If you wish to test Intel HDA compatibility instead of ICHx AC'97 compatibility, replace `AC97` with `intel-hda` in the last command above.
            On Linux, you can include the parameter `--enable-kvm` to run the VM with hardware-assisted virtualization.
